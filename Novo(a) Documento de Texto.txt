/**
  ******************************************************************************
  * @file    main.c
  * @author  Ac6
  * @version V1.0
  * @date    01-December-2013
  * @brief   Default main function.
  ******************************************************************************
*/


#include "stm32f4xx.h"

void delay(int n){
	while(n > 0) --n;
}

// 0 0 desligado
// 0 1 liga pull up
// 1 0 liga pull down
// 1 1 NADA

int main(void)
{

	RCC->AHB1ENR |= 1; //habilita o clock do GPIOA
	RCC->AHB1ENR |= 1 << 4; //habilita o clock do GPIOA
	GPIOA->MODER |= 1 << 12; //seleciona modo de saída digital no pino PA6
	GPIOA->MODER |= 1 << 14; //seleciona modo de saída digital no pino PA7

	//configurando PE4 bk1
	GPIOE->MODER &= ~(0b11 << 8); //desnecessario já que os pinos ja são configurados como entrada
	GPIOE->PUPDR |= (0b01 << 8); // configurando pull up pull down register / ligando resistores de pull up

	//configurando PE3 bk0
	GPIOE->MODER &= ~(0b11 << 6); //desnecessario já que os pinos ja são configurados como entrada
	GPIOE->PUPDR |= (0b01 << 6); // configurando pull up pull down register / ligando resistores de pull up

	unsigned int leitura;

	int flag = 0;
	int flag2 = 0;


	GPIOA -> ODR |= (1 << 6) | (1 << 7);

	while(1){
		leitura = GPIOE->IDR;
		if(!(leitura & (1 << 4))){ //tESANDO A CHAVE K0
			if(flag){
				GPIOA->ODR &= ~(1 << 6); // LIGANDO LED D2
				flag = 0;
			}
			else {
				GPIOA->ODR |= 1<<6; // DESLIGANDO LED D2
				flag = 1;
			}
		}

		if(!(leitura & (1 << 3))){
			if(flag2){
				GPIOA->ODR &= ~(1 << 7);
				flag2 = 0;
			}
			else {
				GPIOA->ODR |= 1<<7;
				flag2 = 1;
			}
		}

//		GPIOA->ODR |= 1 << 6;   //faz o estado do pino como HIGH se PA6 for alto
//		GPIOA->ODR |= 1 << 7;   //faz o estado do pino como HIGH se PA6 for alto
//		delay(TIME);
//		GPIOA->ODR &= ~(1<<6); //faz o estado do pino como LOW se PA6 for baixo
//		GPIOA->ODR &= ~(1<<7); //faz o estado do pino como LOW se PA6 for baixo
	}
}
