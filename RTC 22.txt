/**
  ******************************************************************************
  * @file    main.c
  * @author  Ac6
  * @version V1.0
  * @date    01-December-2013
  * @brief   Default main function.
  ******************************************************************************
*/

#include "stm32f4xx.h"
#include <stdio.h>
#include "Setup.h"
#include "math.h"

typedef struct
{
uint8_t formato, //especifica o formato da hora
 dia, //especifica o dia da semana
 data, //especifica a data do m s
 mes, //especifica o m s
 ano, //especifica o ano
 horas, //especifica a hora
 minutos, //especifica os minutos
 segundos; //especifica os segundos
}RTC_CalendarTypeDef;
RTC_CalendarTypeDef RTC_Calendar; //declara  o da vari vel estruturada

void RTC_Config(void)
{
 //Habilitando o acesso ao dom nio de backup
 RCC->APB1ENR |= RCC_APB1ENR_PWREN; //habilita o clock da interface de energia
 PWR->CR |= PWR_CR_DBP; //acesso de escrita aos registradores do RTC
 RCC->APB1ENR &= ~RCC_APB1ENR_PWREN; //desabilita o clock da interface de energia
 RCC->BDCR |= RCC_BDCR_BDRST; //reseta o dom nio de backup
 RCC->BDCR &= ~RCC_BDCR_BDRST; //reativa o dom nio de backup
 //Configurando a fonte de clock para o RTC no registrador BDCR do m dulo RCC
 RCC->BDCR &= ~(RCC_BDCR_LSEON | RCC_BDCR_LSEBYP); //desliga o oscilador LSE
 RCC->BDCR |= RCC_BDCR_LSEON; //liga o oscilador LSE
 while(!(RCC->BDCR & RCC_BDCR_LSERDY)); //espera o clock LSE ficar pronto
 RCC->BDCR &= ~RCC_BDCR_RTCSEL; //limpa os bits RTCSEL
 RCC->BDCR |= RCC_BDCR_RTCSEL_0; //seleciona LSE como fonte
 RCC->BDCR |= RCC_BDCR_RTCEN; //habilita o clock do RTC
 //Desabilitando a prote  o de escrita dos registradores do RTC
 RTC->WPR = 0xCA;
 RTC->WPR = 0x53;
 //Gera  o do sinal de clock de 1Hz a partir de LSE (32,768 kHz)
 RTC->ISR |= RTC_ISR_INIT; //entra no modo de inicializa  o
 while(!(RTC->ISR & RTC_ISR_INITF)); //aguarda o modo de inicializa  o
 RTC->PRER |= 255; //prescaler s ncrono = 255
 RTC->PRER |= (127 << 16); //prescaler ass ncrono = 127
 RTC->ISR &= ~RTC_ISR_INIT; //sai do modo de inicializa  o
 //Reabilitando a prote  o de escrita nos registradores do RTC
 RTC->WPR = 0xFF;
}

void RTC_SetCalendar(RTC_CalendarTypeDef* RTC_CalendarStruct)
{
 //Habilitando o acesso ao dom nio de backup
 RCC->APB1ENR |= RCC_APB1ENR_PWREN; //habilita o clock da interface de energia
 PWR->CR |= PWR_CR_DBP; //acesso de escrita aos registradores do RTC
 RCC->APB1ENR &= ~RCC_APB1ENR_PWREN; //desabilita o clock da interface de energia
 //Desabilitando a prote  o de escrita dos registradores do RTC
 RTC->WPR = 0xCA;
 RTC->WPR = 0x53;
 RTC->ISR |= RTC_ISR_INIT; //entra no modo de inicializa  o
 while(!(RTC->ISR & RTC_ISR_INITF)); //aguarda o modo de inicializa  o
 //Escolha do formato da hora
 if(RTC_CalendarStruct->formato)
 RTC->CR |= ~RTC_CR_FMT; //formato AM/PM
 else
 RTC->CR &= ~RTC_CR_FMT; //formato 24h
 //Atualiza  o de data e hora
 uint8_t dezena_data = (RTC_CalendarStruct->data)/10;
 uint8_t unidade_data = (RTC_CalendarStruct->data) - 10*dezena_data;
 uint8_t dezena_mes = (RTC_CalendarStruct->mes)/10;
 uint8_t unidade_mes = (RTC_CalendarStruct->mes) - 10*dezena_mes;
 uint8_t dezena_ano = (RTC_CalendarStruct->ano)/10;
 uint8_t unidade_ano = (RTC_CalendarStruct->ano) - 10*dezena_ano;
 uint8_t dezena_hora = (RTC_CalendarStruct->horas)/10;
 uint8_t unidade_hora = (RTC_CalendarStruct->horas) - 10*dezena_hora;
 uint8_t dezena_minuto = (RTC_CalendarStruct->minutos)/10;
 uint8_t unidade_minuto = (RTC_CalendarStruct->minutos) - 10*dezena_minuto;
 uint8_t dezena_segundo = (RTC_CalendarStruct->segundos)/10;
 uint8_t unidade_segundo = (RTC_CalendarStruct->segundos) - 10*dezena_segundo;
 RTC->TR = dezena_hora<<20 | unidade_hora<<16 | //ajusta a hora como HH:MM:SS
dezena_minuto<<12 | unidade_minuto<<8 |
dezena_segundo<<4 | unidade_segundo;
 RTC->DR = dezena_ano<<20 | unidade_ano<<16 | //ajusta a data como YY/MM/DD
(RTC_CalendarStruct->dia)<<13 |
dezena_mes<<12 | unidade_mes<<8 |
dezena_data<<4 | unidade_data;
 //Sa da do modo de inicializa  o
 RTC->ISR &= ~RTC_ISR_INIT;
 while(!(RTC->ISR & RTC_ISR_RSF)); //aguarda o calend rio sincronizar
 //Reabilitando a prote  o de escrita nos registradores do RTC
 RTC->WPR = 0xFF;
}


int segundo_anterior = 0;

int main(void)
{
	Configure_Clock();
	USART1_Init();
	//USART1->BRR = 168;
	Delay_Start();
	RTC_Config();

	//inicializando a estrutura do calend rio
	RTC_Calendar.formato = 0; //defini  o do formato da hora (24h)
	RTC_Calendar.dia = 2; //defini  o do dia (ter a-feira)
	RTC_Calendar.data = 2; //defini  o da data (dia do m s)
	RTC_Calendar.mes = 12; //defini  o do m s (dezembro)
	RTC_Calendar.ano = 25; //defini  o do ano (2025)
	RTC_Calendar.horas = 23; //defini  o da hora
	RTC_Calendar.minutos = 59; //defini  o dos minutos
	RTC_Calendar.segundos = 45; //defini  o dos segundos

	RTC_SetCalendar(&RTC_Calendar); //atualiza  o do calend rio

	while (1)
	{
		uint32_t dez_hora = (RTC->TR & 0b1100000000000000000000) >> 20;
		uint32_t uni_hora = (RTC->TR & 0b11110000000000000000) >> 16;

		uint32_t dez_min = (RTC->TR & 0b111000000000000) >> 12;
		uint32_t uni_min = (RTC->TR & 0b111100000000) >> 8;

		uint32_t dez_seg = (RTC->TR & 0b1110000) >> 4;
		uint32_t uni_seg = (RTC->TR & 0b1111);

		if (segundo_anterior != uni_seg)
		{

//			printf("Hora: %u",dez_hora);
//			printf("%u   ",uni_hora);
//
//			printf("Minutos: %u",dez_min);
//			printf("%u   ",uni_min);
//
//			printf("Segundos: %u",dez_seg);
//			printf("%u\n",uni_seg);

			printf("%u",dez_hora);
			printf("%u:",uni_hora);

			printf("%u",dez_min);
			printf("%u:",uni_min);

			printf("%u",dez_seg);
			printf("%u\n",uni_seg);

			segundo_anterior = uni_seg;
		}
	}


//	RCC->AHB2ENR |= RCC_AHB2ENR_RNGEN;
//	RNG->CR |= RNG_CR_RNGEN;
//
//	RCC->AHB1ENR |= (1 << 4) | 1; //habilita o clock do GPIOE e GPIOA
//
//	GPIOA->MODER |= (1 << 12);  //seleciona modo de sa da digital no pino PA6
//	GPIOE->PUPDR |= 0b01 << 6; //habilita o resistor do pino PE3
//
//	while(1) {
//		uint32_t leitura = (GPIOE->IDR) & (1<<3); //ler o pino PE3
//
//		if(leitura)
//		{
//			GPIOA->ODR |= (1 << 6); //faz o estado do pino como HIGH
//		}
//		else
//		{
//			GPIOA->ODR &= ~(1 << 6);//faz o estado do pino como LOW
//
//			if(RNG->SR & RNG_SR_DRDY)
//			{
//				uint32_t number = RNG->DR;
//				printf("RNG: %08X\n", (unsigned int)ceil((float)number/((pow(2,32)-1)/6)));
//				Delay_ms(1);
//			}
//			while(!(GPIOE->IDR & (1 << 3)));
//		}
//		Delay_ms(1);
//	}

}






